{{/* template to render gateway http endpoint code */ -}}

package {{.PackageName}}

import (
	"context"
	"io/ioutil"
	"net/http"

	"github.com/pkg/errors"
	"go.uber.org/thriftrw/ptr"
	"go.uber.org/zap"
	"{{.GatewayPackageName}}/clients"
	zanzibar "github.com/uber/zanzibar/runtime"

	{{range $idx, $pkg := .IncludedPackages -}}
	{{$pkg.AliasName}} "{{$pkg.PackageName}}"
	{{end -}}

	{{if .Method.Downstream }}
	{{- range $idx, $pkg := .Method.Downstream.IncludedPackages -}}
	{{$file := basePath $pkg.PackageName -}}
	{{$pkg.AliasName}} "{{$pkg.PackageName}}"
	{{end}}
	{{- end}}
)

{{ $workflow := .WorkflowName -}}
{{ $reqHeaderMap := .ReqHeaderMap -}}
{{ $reqHeaderMapKeys := .ReqHeaderMapKeys -}}
{{ $resHeaderMap := .ResHeaderMap -}}
{{ $resHeaderMapKeys := .ResHeaderMapKeys -}}
{{ $clientName := title .ClientName -}}
{{ $handlerName := title .Method.Name | printf "%sHandler" }}
{{ $responseType := .Method.ResponseType}}
{{with .Method -}}

// {{$handlerName}} is the handler for "{{.HTTPPath}}"
type {{$handlerName}} struct {
	Clients *clients.Clients
}

// New{{title .Name}}Endpoint creates a handler
func New{{title .Name}}Endpoint(
	gateway *zanzibar.Gateway,
) *{{$handlerName}} {
	return &{{$handlerName}}{
		Clients: gateway.Clients.(*clients.Clients),
	}
}

// HandleRequest handles "{{.HTTPPath}}".
func (handler *{{$handlerName}}) HandleRequest(
	ctx context.Context,
	req *zanzibar.ServerHTTPRequest,
	res *zanzibar.ServerHTTPResponse,
) {
	{{- if .ReqHeaders -}}
	if !req.CheckHeaders({{.ReqHeaders | printf "%#v" }}) {
		return
	}
	{{- end -}}

	{{if ne .RequestType ""}}
	var requestBody {{.RequestType}}
	if ok := req.ReadAndUnmarshalBody(&requestBody); !ok {
		return
	}
	{{end}}

	workflow := {{$workflow}}{
		Clients: handler.Clients,
		Logger: req.Logger,
		Request: req,
	}

	{{if and (eq .RequestType "") (eq .ResponseType "")}}
	cliRespHeaders, err := workflow.Handle(ctx, req.Header)
	{{else if eq .RequestType ""}}
	response, cliRespHeaders, err := workflow.Handle(ctx, req.Header)
	{{else if eq .ResponseType ""}}
	cliRespHeaders, err := workflow.Handle(ctx, req.Header, &requestBody)
	{{else}}
	response, cliRespHeaders, err := workflow.Handle(ctx, req.Header, &requestBody)
	{{end -}}
	if err != nil {
		switch errValue := err.(type) {
			{{range $idx, $exception := .Exceptions}}
			case *{{$exception.Type}}:
				res.WriteJSON(
					{{$exception.StatusCode.Code}}, cliRespHeaders, errValue,
				)
				return
			{{end}}
			default:
				req.Logger.Warn("Workflow for endpoint returned error",
					zap.String("error", errValue.Error()),
				)
				res.SendErrorString(500, "Unexpected server error")
				return
		}
	}

	{{- if .ReqHeaders }}
	// TODO(sindelar): implement check headers on response
	{{- end }}

	{{if eq .ResponseType "" -}}
	res.WriteJSONBytes({{.OKStatusCode.Code}}, cliRespHeaders, nil)
	{{- else -}}
	res.WriteJSON({{.OKStatusCode.Code}}, cliRespHeaders, response)
	{{- end }}
}

{{end -}}

{{- if .Method.Downstream }}
{{- $method := .Method -}}
{{- with .Method -}}
{{- $methodName := title .Name }}
{{- $clientPackage := .Downstream.PackageName -}}
{{- $clientMethod := .DownstreamMethod -}}
{{- $clientReqType := fullTypeName ($clientMethod).RequestType ($clientPackage) -}}
{{- $clientResType := fullTypeName  ($clientMethod).ResponseType ($clientPackage) -}}
{{- $clientMethodName := title ($clientMethod).Name -}}
{{- $clientExceptions := .DownstreamMethod.Exceptions -}}

// {{$workflow}} calls thrift client {{$clientName}}.{{$clientMethodName}}
type {{$workflow}} struct {
	Clients *clients.Clients
	Logger  *zap.Logger
	Request *zanzibar.ServerHTTPRequest
}

// Handle calls thrift client.
func (w {{$workflow}}) Handle(
{{- if and (eq .RequestType "") (eq .ResponseType "") }}
	ctx context.Context,
	reqHeaders zanzibar.Header,
) (zanzibar.Header, error) {
{{else if eq .RequestType "" }}
	ctx context.Context,
	reqHeaders zanzibar.Header,
) (*{{.ResponseType}}, zanzibar.Header, error) {
{{else if eq .ResponseType "" }}
	ctx context.Context,
	reqHeaders zanzibar.Header,
	r *{{.RequestType}},
) (zanzibar.Header, error) {
{{else}}
	ctx context.Context,
	reqHeaders zanzibar.Header,	
	r *{{.RequestType}},
) (*{{.ResponseType}}, zanzibar.Header, error) {
{{- end}}
	{{- if ne .RequestType "" -}}
	clientRequest := convertTo{{title .Name}}ClientRequest(r)
	{{end}}
	clientHeaders := map[string]string{}
	{{if (ne (len $reqHeaderMapKeys) 0) }}
	var ok bool
	var h string
	{{- end -}}
	{{range $i, $k := $reqHeaderMapKeys}}
	h, ok = reqHeaders.Get("{{$k}}")
	if ok {
		clientHeaders["{{index $reqHeaderMap $k}}"] = h
	}
	{{- end}}
	{{if and (eq $clientReqType "") (eq $clientResType "")}}
		{{if (eq (len $resHeaderMap) 0) -}}
		_, err := w.Clients.{{$clientName}}.{{$clientMethodName}}(ctx, clientHeaders)
		{{else}}
		cliRespHeaders, err := w.Clients.{{$clientName}}.{{$clientMethodName}}(ctx, clientHeaders)
		{{- end }}
	{{else if eq $clientReqType ""}}
		{{if (eq (len $resHeaderMap) 0) -}}
		clientRespBody, _, err := w.Clients.{{$clientName}}.{{$clientMethodName}}(
			ctx, clientHeaders,
		)
		{{else}}
		clientRespBody, cliRespHeaders, err := w.Clients.{{$clientName}}.{{$clientMethodName}}(
			ctx, clientHeaders,
		)
		{{- end }}
	{{else if eq $clientResType ""}}
		{{if (eq (len $resHeaderMap) 0) -}}
		_, err := w.Clients.{{$clientName}}.{{$clientMethodName}}(
			ctx, clientHeaders, clientRequest,
		)
		{{else}}
		cliRespHeaders, err := w.Clients.{{$clientName}}.{{$clientMethodName}}(
			ctx, clientHeaders, clientRequest,
		)
		{{- end }}
	{{else}}
		{{if (eq (len $resHeaderMap) 0) -}}
		clientRespBody, _, err := w.Clients.{{$clientName}}.{{$clientMethodName}}(
			ctx, clientHeaders, clientRequest,
		)
		{{else}}
		clientRespBody, cliRespHeaders, err := w.Clients.{{$clientName}}.{{$clientMethodName}}(
			ctx, clientHeaders, clientRequest,
		)
		{{- end }}
	{{end -}}

	{{- $responseType := .ResponseType }}
	if err != nil {
		switch errValue := err.(type) {
			{{range $idx, $cException := $clientExceptions}}
			case *{{$cException.Type}}:
				serverErr := convert{{$methodName}}{{title $cException.Name}}(
					errValue,
				)
				// TODO(sindelar): Consider returning partial headers
				{{if eq $responseType ""}}
				return nil, serverErr
				{{else}}
				return nil, nil, serverErr
				{{end}}
			{{end}}
			default:
				w.Logger.Warn("Could not make client request",
					zap.String("error", errValue.Error()),
				)
				// TODO(sindelar): Consider returning partial headers
				{{if eq $responseType ""}}
				return nil, err
				{{else}}
				return nil, nil, err
				{{end}}
		}
	}

	// Filter and map response headers from client to server response.

	// TODO: Add support for TChannel Headers with a switch here
	resHeaders := zanzibar.ServerHTTPHeader{}
	{{range $i, $k := $resHeaderMapKeys}}
	resHeaders.Set("{{index $resHeaderMap $k}}", cliRespHeaders["{{$k}}"])
	{{- end}}

	{{if eq .ResponseType "" -}}
	return resHeaders, nil
	{{- else -}}
	response := convert{{title .Name}}ClientResponse(clientRespBody)
	return response, resHeaders, nil
	{{- end -}}
}

{{if and (ne .RequestType "") (ne $clientReqType "") -}}
func convertTo{{title .Name}}ClientRequest(in *{{.RequestType}}) *{{$clientReqType}} {
	out := &{{$clientReqType}}{}

	{{ range $key, $line := $method.ConvertRequestLines -}}
	{{$line}}
	{{ end }}

	return out
}
{{end -}}

{{- $exceptionIndex := .ExceptionsIndex }}
{{range $idx, $cException := $clientExceptions}}
{{- $sException := index $exceptionIndex $cException.Name -}}

func convert{{$methodName}}{{title $cException.Name}}(
	clientError *{{$cException.Type}},
) *{{$sException.Type}} {
	// TODO: Add error fields mapping here.
	serverError := &{{$sException.Type}}{}
	return serverError
}
{{end}}

{{if and (ne .ResponseType "") (ne $clientResType "") -}}
func convert{{title .Name}}ClientResponse(body *{{$clientResType}}) *{{.ResponseType}} {
	// TODO: Add response fields mapping here.
	downstreamResponse := (*{{.ResponseType}})(body)
	return downstreamResponse
}
{{end -}}

{{end -}}
{{end -}}
